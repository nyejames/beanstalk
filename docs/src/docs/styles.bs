[Navbar]

[Header: [title: Styles]]

[Page: 

## What are the keywords inside of sceneheads?
Scenes can be passed expressions, but also have their configuration changed.

By passing a Style object to a scene, the scene will incorporate the style into it's settings.

For HTML projects, the before and after wrappers are HTML tags 
that will have specific indexes for things like where the styles or classes go.

By default HTML scene styles will contain an array of mostly empty strings so additional styles can be inserted in the correct places.

# Making your own styles

[Code:

    -- This is currently just implimented in Rust as a struct
    -- But this is a BS representation of that data type
    @ Style Type = {
        format String = "",

        wrapper = (
            before [String],
            after [String]
        ),

        -- Will remove any wrappers lower than this precedence 
        -- Before adding it's own wrappers
        parent_override = -1,

        inlining_rule Int,

        child_default Style?,

        compatibility Int,

        disable_children Bool,
    }

    @ page Style = {
        
    }
]

# Structure of a Scene:

## Format
Will the scenebody be text in a flavor of markdown? Or just metadata like an alt tag (for images / video elements)?

Currently just accepts:
- markdown
- metadata (like an alt description for HTML)
- code
- comment (removed from the compiler output)
- None (regular string) this is represented by an empty string for the argument

## Wrappers
Strings that are automatically added to the start and end of this string.

## Inlining Rules
This is to help other scenes know how newlines around this scene should be handled.

collapsed string? remove extra newlines / spaces around it etc...

** NOT SURE HOW THIS IS GOING TO WORK YET **

0: inlines itself with p tags before it on after a newline
1: be like headings and break after one newline
1: never inline itself and always break out of the current p tag?
2: ignore it's parents styles / layout completely?
3. break out of all ancestor styles? (apart from the root scene)
4. Completely break out of all scene styles

## Child Default
Gives all children of this scene a base starting style.

## Compatibility
Does this style override other scenes, or is incompatible with other scenes?

Most scene behaviour should have default precendence rules for anything that could get overwritten so none needs to be set.

There may be cases where errors need to be thrown to indicate incompatible styles, 
to be more useful to the programmer than just completely overriding eachother or breaking something.

## Disable children
This prevents the scene from having nested scenes. An error will be thrown if a nested scene is used.

]