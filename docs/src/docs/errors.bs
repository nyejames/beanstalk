[Navbar]

[Header center: [title(1): ERROR HANDLING AND OPTIONALS]]
[Page:

Errors are treated as values in Beanstalk, 
any function that can return an error must have its error handled.

The bang symbol ! is used for handling and creating new Error types.


[code:
    CustomErr Error 

    func_call_that_can_return_an_error() !:
        -- Error handling code
    zz

    -- This function can return a String or None
    parent_func () -> String, Error?:
        return func_call_that_can_return_an_error() !:
            #print("Error: ", error)
            return None
        zz
    zz
]

## Using the ? operator

[code:
    getURL || -> String:
        return getNetworkRequest() ?:
            print("Network did not respond: Using default URL")
            return "example.com"
        zz
    zz

    -- Returns a string or None
    getURL || -> String?:
        return getNetworkRequest()
    zz
]

## Asserts and Panics
There are cases where you want to either catch unexpected state for debugging, 
or prevent the program from continuing if a certain condition is not met or an error is thrown.

For these cases the panic is used to mark functions that can panic explicitly at runtime.
You can't use the panic keyword unless the function has a panic as one if it's possible return values.

You can also create asserts that will stop the program if a condition is not met. 
These are removed by the compiler in release builds.

Functions that can panic at runtime should only be used in cases where the program should absolutely not continue if the function fails.
Such as if there is a high risk of undefined behaviour in a critical and complex part of a program.
Effectively creating a runtime assertion.

[code:
    -- stops the program if 1 is not equal to 1
    -- Runs the code in the block first
    #assert(1 is not 1, "1 is not 1 uh oh")
    #panic
]

[Footer]