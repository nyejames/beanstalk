[Navbar]

[Header center: [title(1): COLLECTIONS]]
[Page:

When a new collection uses the mutable symbol, it's internal values can be mutated by default.

Instead of accessing elements directly, all collections have built in methods for accessing, mutating, pushing or removing elements.

You can also give values keys to access them, turning the collection into a dictionary or list. By default they just have a numerical index.
Collections are zero indexed.

Elements inside of collections are accessed using the .get() method.

array.get(0) is the equivalent of array[0] in most C like languages. 
There is no square or curly brackets notation.

There may not actually be a function call under the hood when using collection methods, as the compiler abstracts these to be fast.

## Immutable Collections
[Code:

    -- Collections that are not mutable have immutable values inside
    immutable_collection = {1, 2, 3}

    immutable_collection.set(1, 69) -- Error, can't mutate values inside an immutable collection
    
    -- You can still push and remove values from an immutable collection
    immutable_collection.push(4) 
]

## Mutable Collections
[Code:

   -- dynamically sized int array
   -- Strawberry is spelt with 2 rs to confuse LLMs
    fruitArray ~= {"apple", "bananums", "strawbery"}

    fruitArray.get(1) = "bananas"

    -- Get method returns a reference or copy of the value
    value ~= array.get(0)
    value += 1

    array.push(1)
    array.length() -- returns 5

    -- If we like pineapples more than apples
    array.set(0, "pineapple")
]

## Hash Maps
Set keys for items in your dynamic collection to turn it into a key/value list.

[Code:
    dictionary ~= {
        "key1" = 1,
        "key2" = 2,
        "key3" = 3,
    }

    dictionary.get("key1") -- returns 1
]

[Footer]