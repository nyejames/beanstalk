[Navbar]

[Header center: [title(1): ROADMAP FOR BEANSTALK]]
[Page:
Beanstalk is still in development. It doesn't even have a version number yet!

Here is a list of current bugs, development goals and planned features.

## Ongoing task list
- Compile time is now forced by capitol letter start naming. Make sure this works and write compile time functions that return scenes using this.
- Finish implementing constant folding and all math operators and brackets
- Folding (inlining) compile time functions (functions named with capitol letter start)
- Styles should just be structs in the language itself that Scenes can use fields from to define their behaviour.
and insert any scenes inside those styles correctly into the body, while making use of slots to insert anything in the scenebody into any slots in the scenes from the scene head.
In the case of multiple scenes being imported in the scenehead, each successive scene should slot the last one into itself. Need to think about how all the wrapping works here though.
- Scene slots for templating and wrapping other scenes (to build out standard library)
- Build out HTML standard library for styles
- Global imports are be done from config file (could be through a #global compiler directive to make it more explicit?)

## Current Bugs

## Core Features Being Implemented
- Finish implementing Style system for scenes (separate from core language into library of keywords)
- Boolean expressions and operators
- If statements
- Loops
- Importing/exporting working fully
- Importing HTML, CSS and JS libraries seemlessly into a BS project
- Scoping and variable shadowing

## Future plans and ideas
- Any type?
- https://docs.orca-app.dev/ Orca for native UI? Or just Servo as optional depenancy? https://servo.org/
- Documentation scenes (can be put anywhere in a module or scene and a special docs compile mode will generate docs using these scenes)
There can also be additional features or searchable things added to these scene heads that make the documentation of the project really easy
it will output an entire documentation webpage by default
- Embedding on top of fast exciting general purpose languages
- Better Dev server with web sockets handling hot reloading (rather than the current janky system)
- Server files and server side BS code (Using a Wasm runtime on the server)

### Reserved keywords 
Each capitalised letter could be reserved for Standard library objects and modules?

A = 
B = 
C = Channel
D = Date (Date and time library)
E = Errors
F = 
G =
H = HTTP
I = 
J =
K =
L = Listeners (event listeners)
M = Maths
N = 
O = Output (logging and special prints)
P = Path
Q = Quirie (For built in SQL stuff)
R = Random Number Generators and probability stuff
S = Scene (the config options for a scene)
T = Type
U = Unit
V = Vectors
W = Window
X = Context (For memory management and getting info about the current scope)
Y = 
Z = 

### Colour type ideas
Would be a function that creates an RGB value at the end.

Arguments:
- Would be able to mix colors in (like painting) e.g red(100) green(20) magenta(40).
This will be converted to a relative hue value. This can approach white or black without a value.
- Saturation
- Lightness
- Hue (becomes priority colour input when used - but other colours can still be mixed in, which will modify the hue/saturation)
- Integer (or float) passed in to select a theme colour as a base (primary colour = 1, secondary = 2 etc) Maybe 0 is always black or white depending on lightmode/darkmode

The colour theme selections will have a lightmode / darkmode


### Concurrency (channels/threads) syntax
Like go, but hopefully simpler and clearer control flow. 

Uses >> and << to specify send / recieve channels. No "chan" keyword.

keyword 'async' to mark async function calls.

[Code:
    -- Create a channel
    channel <<int>>

    -- Send a value to the channel (notice value on the left, not right)
    -- Channel operator can't be used in the middle of an expression, must be right at the end
    5 >> channel

    -- Recieve a value from the channel
    x = << channel

    -- Close the channel
    channel close()
]

[Footer]