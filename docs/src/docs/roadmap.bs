[Navbar]
[header center: [title(1): ROADMAP FOR BEANSTALK]]
[main:
Beanstalk is still in development. It doesn't even have a version number yet!

Here is a list of current bugs, development goals and planned features.

## Ongoing task list
- Finish testing named tuple stuff, make sure it works as expected 
- then start try to make the standard library styles using that syntax 
    - Build out styles and what the shape of a style struct is
- Move all of the html standard lib tokens to just exported variables included in builds
- Need to create a Style type, which is not a primitive type. (see styles for the shape of that type). 
This will be the first test for implementing a custom type system (figure out how that will work -> whether any tuple created also creates a type of itself)
- Styles should just not be functions by default, they can be returned by functions only
    > Styles will just be structs of the correct properties that can contain nested styles accessed with a dot
    > so instead of nav(0) we will do nav.0 or something to that affect. button becomes button.click() (or it has to be button() and must have brackets)
    > Any dynamic stuff just has to have brackets anyway (dot is compile time access, brackets are runtime access)
- Parsing named tuples for reading the config file
- Maybe just don't enforce brackets at all for function calls?
- Finish implementing constant folding and all math operators and brackets
- Color theme system (color type built into language)
- dev / build prunes dev files that are no longer in the src files (bs files are cleared out of the dev folder each time)

## Current Bugs
*Scenes*
- Emphasis and strong tags are not being parsed correctly for bullet points. Markdown parser needs some work.
- Not always merging spans into previous P tags correctly

## Core Features Being Implemented
- Finish implementing Style system for scenes (separate from core language into library of keywords)
- Boolean expressions and operators
- If statements
- Loops
- Importing/exporting working fully
- Scene reactivity and full component system
- Importing HTML, CSS and JS libraries seemlessly into a BS project
- Scoping and variable shadowing
- Commit to final memory management strategy for the language
- Compiler as a proper command line tool
- Documentation generator - scenes can be docs scenes that document the code around it, everything else is placed into code blocks around these scenes
- Nestable comments?

## Future plans and ideas
- Any type?
- https://docs.orca-app.dev/ Orca for native UI?
- Documentation scenes (can be put anywhere in a module or scene and a special docs compile mode will generate docs using these scenes)
There can also be additional features or searchable things added to these scene heads that make the documentation of the project really easy
it will output an entire documentation webpage by default
- Embedding on top of fast exciting general purpose languages
- Better Dev server with web sockets handling hot reloading (rather than the current janky system)
- Server files and server side BS code (Using a Wasm runtime on the server)

### Reserved keywords for standard lib functions
Beanstalk should be a very batteries included language, with a lot of standard library functions.
The standard library will be the only default import option in the project config file.

print|import|rng|log|round|abs|sin|cos|tan|expo|gcd

### Colour type ideas
Would be a function that creates an RGB value at the end.

Arguments:
- Would be able to mix colors in (like painting) e.g red(100) green(20) magenta(40).
This will be converted to a relative hue value. This can approach white or black without a value.
- Saturation
- Lightness
- Hue (becomes priority colour input when used - but other colours can still be mixed in, which will modify the hue/saturation)
- Integer (or float) passed in to select a theme colour as a base (primary colour = 1, secondary = 2 etc) Maybe 0 is always black or white depending on lightmode/darkmode

The colour theme selections will have a lightmode / darkmode


### Concurrency (channels/threads) syntax
Like go, but hopefully simpler and clearer control flow. 

Uses >> and << to specify send / recieve channels. No "chan" keyword.

keyword 'async' to mark async function calls.

[code:
    -- Create a channel
    channel <<int>>

    -- Send a value to the channel (notice value on the left, not right)
    -- Channel operator can't be used in the middle of an expression, must be right at the end
    5 >> channel

    -- Recieve a value from the channel
    x = << channel

    -- Close the channel
    channel close()
]

[Footer]