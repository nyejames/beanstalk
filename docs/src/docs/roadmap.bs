[Navbar]
[header center: [title(1): ROADMAP FOR BEANSTALK]]
[main:
Beanstalk is still in development. It doesn't even have a version number yet!

Here is a list of current bugs, development goals and planned features.

## Ongoing task list
- Parsing tuples for reading the config file
- Finish implementing all math operators and brackets
- Get variables and mostly folded expressions working fully
- Color theme system (color type built into language)

## Current Bugs
*Scenes*
- Emphasis and strong tags are not being parsed correctly for bullet points. Markdown parser needs some work.
- Not always merging spans into previous P tags correctly

## Core Features Being Implemented
- Finish implementing Style system for scenes (separate from core language into library of keywords)
- Boolean expressions and operators
- If statements
- Loops
- Importing/exporting working fully
- Scene reactivity and full component system
- Importing HTML, CSS and JS libraries seemlessly into a BS project
- Scoping and variable shadowing
- Commit to final memory management strategy for the language
- Compiler as a proper command line tool
- Documentation generator - scenes can be docs scenes that document the code around it, everything else is placed into code blocks around these scenes
- Nestable comments?

## Future plans and ideas
- Multiple return functions basically become like classes anyway?
- Embedding on top of fast exciting general purpose languages
- Better Dev server with web sockets handling hot reloading (rather than the current janky system)
- Server files and server side BS code (Using a Wasm runtime on the server)

### Reserved keywords for standard lib functions
Beanstalk should be a very batteries included language, with a lot of standard library functions.
The standard library will be the only default import option in the project config file.

print|import|rng|log|round|abs|sin|cos|tan|expo|gcd

### Colour type ideas
Would be a function that creates an RGB value at the end.

Arguments:
- Would be able to mix colors in (like painting) e.g red(100) green(20) magenta(40).
This will be converted to a relative hue value. This can approach white or black without a value.
- Saturation
- Lightness
- Hue (becomes priority colour input when used - but other colours can still be mixed in, which will modify the hue/saturation)
- Integer (or float) passed in to select a theme colour as a base (primary colour = 1, secondary = 2 etc) Maybe 0 is always black or white depending on lightmode/darkmode

The colour theme selections will have a lightmode / darkmode


### Concurrency (channels/threads) syntax
Like go, but hopefully simpler and clearer control flow. 

Uses >> and << to specify send / recieve channels. No "chan" keyword.

[code:
    -- Create a channel
    channel <<int>>

    -- Send a value to the channel (notice value on the left, not right)
    -- Channel operator can't be used in the middle of an expression, must be right at the end
    5 >> channel

    -- Recieve a value from the channel
    x = << channel

    -- Close the channel
    channel close()
]

[Footer]