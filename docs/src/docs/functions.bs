[Navbar]

[Header center: [title(1): FUNCTIONS]]
[Page:

If the function can only return an error, you can use a '!' as the specified return type.

Arguments are passed in as immutable references (or immutable copies) by default, but mutable references can be passed by using the ~ operator to specify mutability.
This can be specified further as being a copy by specifying the type as a copy.

The 'fn' keyword is used.

## The arrow operator
The arrow operator is used to define the signature of a function. 
If the function returns a value, it must be specified by the type signature.

[Code:
    -- Returns an int
    multipleReturns = fn(x Int) -> Int: return 1 + x

    -- Returns a struct
    returnStruct = fn(x Int) -> SomeStruct:
        return SomeStruct{1, 2}
    zz

    IntResult:
        val1 Int,
        val2 Int,
        val3 Int
    zz

    differentReturns = fn(spicy bool = false) -> IntResult:
        if spicy: return {69, 420, 1337}
        
        return {1, 2, 3}
    zz

    canError = fn(x String) -> String!:
        return fetch(x)
    zz

    -- Calling a function
    multipleReturns(5)

    -- Calling a function with named arguments
    differentReturns(spicy = true)
]

## Anonymous Functions
Anonymous functions are a way to pass functions as values.

Unlike named functions, they have optional type signatures.

[Code: 
    -- Anonymous function
    fn(x Int) -> Int: return x + 1

    -- No type signature required
    fn: return "Hello, World!"

    -- Anonymous function that has side effects
    fn(increase Int): timer += increase
]

## Concurrent Functions
In a similar style to Go. Beanstalk plans on having concurrent functions with message passing.

Concurrent function calls use the 'async' keyword instead of 'fn'.

[Code:
    -- Returns an int
    concurrentFunc = async() -> Int: return 69
]

[Footer]