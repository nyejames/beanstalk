[Navbar]

[Header center: [title(1): BASIC BS SYNTAX]]
[Page:

Each Beanstalk file is a module.

Each module is just a file that exports a Struct with the filename becoming the name of the struct.

Projects are a collection of modules with a config file as an entry point.

# Quick Synax Overview
The specifics are not fully decided on, but some of the key things are:
- Using 'zz' keyword to close scopes (Colon opens scopes).
- No use of square brackets for arrays, curly braces are used instead. Square brackets are only used for scenes.
- Equality and other logical operators only use keywords (you can't use == or ! for logical expressions for example)
- ~ tilde symbol to indicate mutability (mutability must be explicit)
- Double dashes for single line comments (--)

4 spaces are recommended for indentation. 

# Compiletime vs Runtime naming
Anything that should exist only at compile time must start with a capital letter. 
Anything else starts with a lower case letter. 
This is to help the compiler know exactly what you intend to be constant or inlined.

So types use Upper_Snake_Case. But instances of types use regular snake_case (if they are not constants).

camelCase is used for naming functions, 
but if you want to tell the compiler that the function should be inlined (evaluated at compiletime),
you can name it with PascalCase and the compiler will replace the function with it's returned values.

You will get an error if you use a name starting with a capitol letter that can't be a constant.

Top level styles use PascalCase as they should always be constants.
But their unlockable styles use lowercase as they usually exist at runtime.

The compiler will still sometimes evaluate lower case variables as constants or inline regular functions.

# Comments
Comments use a double minus sign '--'.

[Code: 

-- normal comment

[comment:
    Multiline comment

    Woo
]

]

# Variables
Equals means assign.

Similar to Python, there is no special keyword for creating a new variable, but you can specify a type annotation.

The @ symbol before a name is used to export variables and methods/functions outside of a module or object.



## Assignment

### Variable with optional type annotation (tilde means this is a mutable and can change)
[Code:
    float_var ~Float = 0.0
]

Any variable declaration can be found by searching the variable name, followed by a tilde '~'.

### Mutable variables with inferred types
[Code: 
    int_var ~= 0
    float_var ~= 0.0
    string_var ~= "boo!"
]

Type annotations are not needed for variables if they are being initialised with a value.

## Static Assignment
[Code:
    -- UTF-16 string with type annotation
    my_brain ~String = "Dumb"

    -- 64 bit immutable float with inferred type
    number = 69.420

    -- Becomes an immutable reference to the value
    -- For primatives this is actually just an immutable copy,
    -- But the behaviour is consistent for all datatypes, including heap allocated ones
    another_number = number

    -- Becomes a mutable reference to the number
    -- or moves the value if it isn't used again later in the scope
    another_mutable_number ~= number

    -- Type error (number is not mutable)
    number = 1

    -- Type error (another_mutable_number is a float type)
    another_mutable_number ~= "Not a number"
]

Variables must be given a value or a type when they are declared.

All copies of collections are explicit and must use the 'copy' keyword in place of a type.

[Code:
    -- Create a new collection of integers
    a_collection ~= {1, 2, 3, 4, 5}
    
    -- Deep mutable copy of a collection
    a_copy ~copy = a_collection

    -- Immutable reference to a_collection
    a_reference = a_collection

    -- Ownership passed or mutable reference depending on context
    a_reference ~= a_collection

    -- a_reference is still a reference to the original collection
    a_reference.push(5)
    print(a_reference) -- {1, 2, 3, 4, 5, 5}

    a_collection.pull(a_collection length - 1)
    print(a_collection) -- {23.0}
]

If you are creating a non-collection variable and need it to be formatted over multiple lines, 
you can use parentheses. The first newline must be after the '=' assignment operator.

[Code:
    some_int = (
        4 + 5 + 6 + 7 + 8 + 9 + 10
    )
]

# Imports
The import keyword works like a function call, returning the imported value.

[Code:
    -- Importing a struct without renaming it from a library
    import("math")
    math.root(2, 8)

    -- Renaming the import
    encryption = import("libs/encrypt")

]

# Data Types
All data type keywords contain methods from the standard library for common manipulation of types. 
The zero value is the value a variable will be assigned if it is not assigned a value when being initialized.

## Numerical Types
[table(3):
    [: Type] [: Description] [: Zero Value]

    [: float ] [: 64 bit floating point number] [: 0.0]

    [: int ] [:  32 bit signed integer (may become 64 bit in the future or in certain contexts) ] [: 0]
]

## String based Types
These are all different ways to create strings.

[table(3): 
    [: Type] [: Description] [: Zero Value]

    [: string ] [: UTF-16 (For JS compatibility)] [: ""]

    [: error] [: Contains a special type of debug string detailing the error] [: "ERROR"]

    [: scene ] [: The templating syntax of Beanstalk. See [link "./scenes": Scenes for more info!]] [: "`[]`" -  an empty scene]

]

## Collection Types
[table(3):
    [: Type ] [: Description] [: Zero Value]

    [: Tuple ] [: Any number of immutable items seperated by commas. See [link "./collections": Collections] for more information.] [: ()]

    [: Collection ] [: A blend between arrays and structs. See [link "./collections": Collections] for more information.] [: {}]
    
    [: Choice ] [: Rust style tagged unions (enums). To be implemented. ] [: error]
]

# Strings
String is the keyword for string types in Beanstalk. Double quotes are automatically strings. 

[Code: "Double quotes for a UTF-16 string literal"]

Backticks are used for RAW strings. To escape a backtick it must be preceded with a backslash \.

Scenes are used instead of format strings. See [link "./scenes": Scenes] for more information.

# Logical Operators
The 'is' keyword is used to check equality. Not ==. The "and / or" keywords are used for logical and / or and 'not' is used to invert a truthy value to falsy or vice versa.

[table(3):
    [: Operator] [: Description]          [: Precedence]
    [: `^`]        [: Exponent]            [: 4]
    [: `//`]       [: Root]                [: 4]
    [: `*`]        [: Multiplication]       [: 3]
    [: `/`]        [: Division]             [: 3]
    [: %]          [: Modulo (truncated)]   [: 3]
    [: %%]         [: Remainder (floored)]  [: 3]
    [: +]          [: Sum]                  [: 2]
    [: `-`]        [: Subtraction]          [: 2]
]

]

[Footer]