[Navbar]

[Header center: [title(1): BASIC BS SYNTAX]]
[Page:

Each Beanstalk file is a module.

Each module is just a file that exports functions and fields.

Projects are a collection of modules with a config file as an entry point.

The config file will define how to split up projects into seperate wasm modules,
but by default a project will turn into one big wasm module.

# Quick Synax Overview
The specifics are not fully decided on, but some of the key things are:
- Using 'zz' keyword to close scopes (Colon opens scopes).
- No use of square brackets for arrays, curly braces are used instead. Square brackets are only used for templates.
- Equality and other logical operators only use keywords (you can't use == or ! for logical expressions for example)
- ~ tilde symbol to indicate mutability (mutability must be explicit). This comes before the type.
- Double dashes for single line comments (--)

4 spaces are recommended for indentation. 

- Types / Objects use Upper_Snake_Case.
- Everything else uses regular_snake_case

# Comments
Comments use a double minus sign '--'.

Documentation comments will eventually be created via special scenes that use the #docs directive.

[Code: 

-- normal comment

[#docs:
    Multiline comment

    Woo
]

]

# Variables
Equals means assign. Tilde ~ means this is a mutable and can change.

Declarations with an explicit type are exported (public), 
declarations with inferred types are private.

## Assignment

### Variables
[Code:
    int ~= 0
    float ~= 0.0

    string ~= "boo!"
    char ~= 'ðŸ˜Š'
    raw_string ~= `hi`

    template ~= []

    bool ~= true

    mutable_collection ~= {}
    immutable_collection = {}
    
    struct_definition = |
        value Int,
        another_value Float,
    |
]

]

## Static Assignment
[Code:
    -- 64 bit immutable float
    number = 420.69

    -- Becomes an immutable reference to the value
    -- For primatives this is actually just an immutable copy,
    -- But the behaviour is consistent for all datatypes, including heap allocated ones
    another_number = number

    -- Becomes a mutable reference to the number
    -- or moves the value if it isn't used again later in the scope
    another_mutable_number ~= number

    -- Type error (number is not mutable)
    number = 1

    -- Type error (another_mutable_number is a float type)
    another_mutable_number ~= "Not a number"
]

All copies of collections are explicit and must use the 'copy' keyword in place of a type.

[Code:
    -- Create a new collection of integers
    a_collection ~= {1, 2, 3, 4, 5}
    
    -- Deep mutable copy of a collection
    a_copy ~copy = a_collection

    -- Immutable reference to a_collection
    a_reference = a_collection

    -- Ownership passed or mutable reference depending on context
    a_reference ~= a_collection

    -- a_reference is still a reference to the original collection
    a_reference.push(5)
    print(a_collection) -- {1, 2, 3, 4, 5, 5}

    a_collection.pull(a_collection.length() - 1)
    print(a_collection) -- {23.0}
]

Expressions can span over multiple lines.

But statements must start after a newline.

[Code:
    -- Valid
    some_int =
        4 + 5 + 6 + 7 + 
        8 + 9 + 10

    -- Also valid
    some_int =
        4 + 5 + 6 + 7
        + 8 + 9 + 10
]

# Imports
[Code:
    -- Importing everything inside an object
    #import(/libs/math)
    root(2, 8)

    -- Renaming the import
    encryption = #import("libs/encrypt")
]

# Data Types
All data type keywords contain methods from the standard library for common manipulation of types. 
The zero value is the value a variable will be assigned if it is not assigned a value when being initialized.

## Numerical Types
[table(3):
    [: Type] [: Description] [: Zero Value]

    [: float ] [: 64 bit floating point number] [: 0.0]

    [: int ] [:  32 bit signed integer (may become 64 bit in the future or in certain contexts) ] [: 0]
]

## String based Types
These are all different ways to create strings.

[table(3): 
    [: Type] [: Description] [: Zero Value]

    [: string ] [: UTF-16 (For JS compatibility)] [: ""]

    [: scene ] [: The templating syntax of Beanstalk. See [link "./scenes": Scenes for more info!]] [: "`[]`" -  an empty scene]
]

## Collection Types
[table(3):
    [: Type ] [: Description] [: Zero Value]

    [: Tuple ] [: Any number of immutable items seperated by commas. See [link "./collections": Collections] for more information.] [: ()]

    [: Collection ] [: A blend between arrays and structs. See [link "./collections": Collections] for more information.] [: {}]
    
    [: Choice ] [: Rust style tagged unions (enums). To be implemented. ] [: error]
]

# Strings
String is the keyword for string types in Beanstalk. Double quotes are automatically strings. 

[Code: "Double quotes for a UTF-16 string literal"]

Backticks are used for RAW strings. To escape a backtick it must be preceded with a backslash \.

Scenes are used instead of format strings. See [link "./scenes": Scenes] for more information.

# Logical Operators
The 'is' keyword is used to check equality. Not ==. The "and / or" keywords are used for logical and / or and 'not' is used to invert a truthy value to falsy or vice versa.

[table(3):
    [: Operator] [: Description]          [: Precedence]
    [: `^`]        [: Exponent]            [: 4]
    [: `//`]       [: Root]                [: 4]
    [: `*`]        [: Multiplication]       [: 3]
    [: `/`]        [: Division]             [: 3]
    [: %]          [: Modulo (truncated)]   [: 3]
    [: %%]         [: Remainder (floored)]  [: 3]
    [: +]          [: Sum]                  [: 2]
    [: `-`]        [: Subtraction]          [: 2]
]

]

[Footer]
