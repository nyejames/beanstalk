[Navbar]
[header center: [title(1): BASIC BEANSTALK SYNTAX]]
[main:

# Quick Synax Overview
The specifics are not fully decided on, but some of the key points are:
- No whitespace significance, using 'end' keyword to close scopes instead.
- No use of square brackets for arrays, curly braces are used instead. Square brackets are only used for scenes.
- Colon is only used inside scene heads, equals is used for everything related to assignment. Including when declaring functions.
- Equality and other logical operators only use keywords (you can't use == or ! in logical expressions for example)
- A radically minimal struct syntax that uses parenthesis.
- (possibly) ~ tilde symbol to indicate mutability (mutability must be explicit like in Rust)
- double dashes for comments (--)

# Style Guide
The style guide is:
- snake_case for variables, collections, styles and scenes
- Upper_Snake_Case for types and primatives
- CamelCase for functions and methods
- SCREAMING_SNAKE_CASE for constants (this is what determines a constant, not the keyword 'const')

4 spaces are recommended for indentation. 

# Comments
Comments use a double minus sign '--'. 

Multiline (block) comments use a triple minus (or more) to start and end the comment.

[code: 
-- normal comment

---
Multiline comment

Woo
---
]

# Variables
Equals means assign. Fully capitalized names become constants or read-only variables depending on their context.

Similar to Python, there is no special keyword for creating a new variable, but you can specify a type annotation.

The @ symbol before a name is used to export variables and methods/functions outside of a module or object.

## Assignment
Types will be inferred if not specified. 
Usually, you don't need to specify a type unless you are creating a new type or a collection.

### Compile Time Constant
[code: 
    IMMUTABLE_VARIABLE = 69
]

### Variable with type annotation (tilde means this is a mutable and can change)
[code: 
    float_var ~Float = 0.0
]

### Mutable variables with inferred types
[code: 
    float_var ~= 0.0
    int_var ~= 0
    string_var ~= "boo!"
]

## Static Assignment
[code:
    -- UTF-16 string with type annotation
    my_brain ~String = "Dumb"

    -- 64 bit immutable float with inferred type
    number = 69.420

    -- Becomes an immutable reference to the number
    another_number = number

    -- Becomes a mutable reference to the number
    another_mutable_number ~= number

    -- Type error (number is not mutable)
    number = 1

    -- Type error (another_mutable_number is a float type)
    another_mutable_number ~= "Not a number"
]

Variables must be given a value or a type when they are declared.

If an error occurs during assignment of a variable, it's type becomes an Error and must be handled. 
Unhandled assignment errors at runtime will default the variable to it's zero value.

All copies of collections are explicit and must use the 'copy' keyword in place of a type.

[code:
    -- Create a new collection of integers
    a_collection {Int} = {1, 2, 3, 4, 5}
    
    -- Deep copy of a collection
    a_copy copy = a_collection

    -- Reference to a_collection
    a_reference = a_collection

    -- Mutable Reference to a_collection (or ownership passed depending on context)
    a_reference ~= a_collection

    -- a_reference is still a reference to the original collection
    a_reference add(5)
    print(a_reference) -- {1, 2, 3, 4, 5, 5}

    a_collection remove(a_collection length - 1)
    print(a_collection) -- {23.0}
]

If you are creating a non-collection variable and need it to be formatted over multiple lines, 
you can use the end keyword. The first newline must be after the '=' assignment operator.

[code:
    some_int =
        4 + 5 + 6 + 7 + 8 + 9 + 10
    end
]

# Data Types
All data type keywords contain methods from the standard library for common manipulation of types. 
The zero value is the value a variable will be assigned if it is not assigned a value when being initialized.

## Numerical Types
There is an intention to support all of these number types in the future. **Currently only 64 bit floats are supported.**

[table(3):
    [: Type] [: Description] [: Zero Value]

    [: float ] [: 64 bit floating point number on 64 bit systems, 32 bit on 32 bit systems ] [: 0.0]

    [: int ] [:  64 bit signed integer on 64 bit systems, 32 bit on 32 bit systems ] [: 0]
]

## String based Types
Beanstalk uses UTF-16 strings by default to keep all string manipulations inside JS. 
The speed penalty of passing strings in and out of Wasm is currently not worth the extra complexity, 
so all string expressions will compile to JS rather than Wasm.

Eventually this will be entirely manipulated in Wasm, allowing for different string types and faster string operations. For now, JS is fast enough.

[table(3): 
    [: Type] [: Description] [: Zero Value]

    [: string ] [: UTF-16 (For JS compatibility)] [: ""]

    [: error] [: Contains a special type of debug string detailing the error] [: "ERROR"]

    [: path] [: *NOT YET SUPPORTED* Path to a file or import, automatically formats the slashes to the correct format for the OS. Syntax pending but might start with an @ symbol. e.g @libs/stuff/cool.png] [: ""]
]

## Collection Types
[table(3):
    [: Type ] [: Description] [: Zero Value]

    [: Tuple ] [: Any number of immutable items seperated by commas. See [link "./collections": Collections] for more information.] [: ()]

    [: Collection ] [: A blend between arrays and structs. See [link "./collections": Collections] for more information.] [: {}]
    
    [: choice ] [: Rust style enums. To be implemented. ] [: error]

    [: type ] [: For generics and datatype related operations] [: error]
]

## Scene Types
[table(3):
    [: Type ] [: Description] [: Zero Value]

    [: scene ] [: The templating syntax of Beanstalk. See [link "./scenes": Scenes for more info!]] [: "`[]`" -  an empty scene]
]

# Strings
String is the keyword for string types in Beanstalk. Double quotes are automatically strings. 

[code: "Double quotes for a UTF-16 string literal"]

Backticks are used for RAW strings. To escape a backtick it must be preceded with a backslash \.

[code: "string literal with \{curly braces} in it that are escaped"]

[code: 
    `9 "is" {5 + 4}`
    -- result is "9 "is" 9"
]

# Logical Operators
The 'is' keyword is used to check equality. Not ==. The "and / or" keywords are used for logical and / or and 'not' is used to invert a truthy value to falsy or vice versa.

[table(3):
    [: Operator] [: Description]          [: Precedence]
    [: `^`]        [: Exponents]            [: 4]
    [: `//`]       [: Roots]                [: 4]
    [: `*`]        [: Multiplication]       [: 3]
    [: `/`]        [: Division]             [: 3]
    [: %]          [: Modulo (truncated)]   [: 3]
    [: %%]         [: Remainder (floored)]  [: 3]
    [: +]          [: Sum]                  [: 2]
    [: `-`]        [: Subtraction]          [: 2]
]

]

[Footer]
