-- STANDARD HTML LIBRARY FOR SCENE STYLES

-- To be converted


            Token::Link => {
                // Inside brackets is set to true for these
                // So it will enforce the parenthesis syntax in create_expression
                scene_tags.push(Tag::A(
                    create_expression(
                        tokens,
                        i,
                        false,
                        ast,
                        &mut DataType::CoerceToString,
                        true,
                        variable_declarations,
                        token_positions,
                    )?,
                    token_positions[*i].to_owned(),
                ));
            }

            Token::Padding => {
                let required_args: Vec<Arg> = vec![
                    Arg {
                        name: "all".to_string(),
                        data_type: DataType::Union(vec![DataType::Float, DataType::Int]),
                        value: Value::Float(1.5),
                    },
                    Arg {
                        name: "top".to_string(),
                        data_type: DataType::Union(vec![DataType::Float, DataType::Int]),
                        value: Value::Float(0.0),
                    },
                    Arg {
                        name: "right".to_string(),
                        data_type: DataType::Union(vec![DataType::Float, DataType::Int]),
                        value: Value::Float(1.5),
                    },
                    Arg {
                        name: "bottom".to_string(),
                        data_type: DataType::Union(vec![DataType::Float, DataType::Int]),
                        value: Value::Float(0.0),
                    },
                    Arg {
                        name: "left".to_string(),
                        data_type: DataType::Union(vec![DataType::Float, DataType::Int]),
                        value: Value::Float(1.5),
                    },
                ];

                scene_styles.push(Style::Padding(
                    create_expression(
                        tokens,
                        i,
                        false,
                        ast,
                        &mut DataType::Structure(required_args),
                        true,
                        variable_declarations,
                        token_positions,
                    )?,
                    token_positions[*i].to_owned(),
                ));
            }

            Token::Margin => {
                scene_styles.push(Style::Margin(
                    create_expression(
                        tokens,
                        i,
                        false,
                        ast,
                        &mut get_any_number_datatype(),
                        true,
                        variable_declarations,
                        token_positions,
                    )?,
                    token_positions[*i].to_owned(),
                ));
            }

            // For positioning inside a flex container / grid
            Token::Order => {
                scene_styles.push(Style::Order(
                    create_expression(
                        tokens,
                        i,
                        false,
                        ast,
                        &mut get_any_number_datatype(),
                        true,
                        variable_declarations,
                        token_positions,
                    )?,
                    token_positions[*i].to_owned(),
                ));
            }

            Token::BG => {
                scene_styles.push(Style::BackgroundColor(
                    create_expression(
                        tokens,
                        i,
                        false,
                        ast,
                        &mut get_rgba_args(),
                        true,
                        variable_declarations,
                        token_positions,
                    )?,
                    token_positions[*i].to_owned(),
                ));
            }

            // Colours
            Token::Rgb => {
                let color_type = token.to_owned();
                scene_styles.push(Style::TextColor(
                    create_expression(
                        tokens,
                        i,
                        false,
                        ast,
                        &mut get_rgba_args(),
                        true,
                        variable_declarations,
                        token_positions,
                    )?,
                    color_type,
                    token_positions[*i].to_owned(),
                ));
            }

            // TODO - HSL and HSV
            // Token::Hsv | Token::Hsl => {}
            Token::Red
            | Token::Green
            | Token::Blue
            | Token::Yellow
            | Token::Cyan
            | Token::Magenta
            | Token::White
            | Token::Black => {
                let color_type = token.to_owned();

                scene_styles.push(Style::TextColor(
                    create_expression(
                        tokens,
                        i,
                        false,
                        ast,
                        &mut DataType::CoerceToString,
                        true,
                        variable_declarations,
                        token_positions,
                    )?,
                    color_type,
                    token_positions[*i].to_owned(),
                ));
            }

            Token::Center => {
                scene_styles.push(Style::Center(false, token_positions[*i].to_owned()));
            }

            Token::Size => {
                scene_styles.push(Style::Size(
                    create_expression(
                        tokens,
                        i,
                        false,
                        ast,
                        &mut get_any_number_datatype(),
                        true,
                        variable_declarations,
                        token_positions,
                    )?,
                    token_positions[*i].to_owned(),
                ));
            }

            Token::Blank => {
                scene_styles.push(Style::Blank);
            }

            Token::Hide => {
                scene_styles.push(Style::Hide(token_positions[*i].to_owned()));
            }

            Token::Table => {
                scene_tags.push(Tag::Table(
                    create_expression(
                        tokens,
                        i,
                        false,
                        ast,
                        &mut DataType::Int,
                        true,
                        variable_declarations,
                        token_positions,
                    )?,
                    token_positions[*i].to_owned(),
                ));
            }

            Token::Img => {
                scene_tags.push(Tag::Img(
                    create_expression(
                        tokens,
                        i,
                        false,
                        ast,
                        &mut DataType::CoerceToString,
                        true,
                        variable_declarations,
                        token_positions,
                    )?,
                    token_positions[*i].to_owned(),
                ));
            }

            Token::Video => {
                scene_tags.push(Tag::Video(
                    create_expression(
                        tokens,
                        i,
                        false,
                        ast,
                        &mut DataType::CoerceToString,
                        true,
                        variable_declarations,
                        token_positions,
                    )?,
                    token_positions[*i].to_owned(),
                ));
            }

            Token::Audio => {
                scene_tags.push(Tag::Audio(
                    create_expression(
                        tokens,
                        i,
                        false,
                        ast,
                        &mut DataType::CoerceToString,
                        true,
                        variable_declarations,
                        token_positions,
                    )?,
                    token_positions[*i].to_owned(),
                ));
            }

                        Token::CodeBlock(content) => {
                scene_tags.push(Tag::Code(
                    content.to_string(),
                    token_positions[*i].to_owned(),
                ));
            }

            Token::Nav => {
                scene_tags.push(Tag::Nav(
                    create_expression(
                        tokens,
                        i,
                        false,
                        ast,
                        // Maybe accept more arguments in the future for more control over nav styles
                        // For now this is just a number that selects a predetermined style
                        &mut get_any_number_datatype(),
                        true,
                        variable_declarations,
                        token_positions,
                    )?,
                    token_positions[*i].to_owned(),
                ));
            }

            Token::Title => {
                scene_tags.push(Tag::Title(
                    create_expression(
                        tokens,
                        i,
                        false,
                        ast,
                        &mut get_any_number_datatype(),
                        true,
                        variable_declarations,
                        token_positions,
                    )?,
                    token_positions[*i].to_owned(),
                ));
            }

            Token::Main => {
                scene_tags.push(Tag::Main);
            }
            Token::Header => {
                scene_tags.push(Tag::Header);
            }
            Token::Footer => {
                scene_tags.push(Tag::Footer);
            }
            Token::Section => {
                scene_tags.push(Tag::Section);
            }

            Token::Redirect => {
                let required_args: Vec<Arg> = vec![Arg {
                    name: "href".to_string(),
                    data_type: DataType::String,
                    value: Value::None,
                }];

                scene_tags.push(Tag::Redirect(
                    create_expression(
                        tokens,
                        i,
                        false,
                        ast,
                        &mut DataType::Structure(required_args.to_owned()),
                        true,
                        variable_declarations,
                        token_positions,
                    )?,
                    token_positions[*i].to_owned(),
                ));
            }

                        // Completely skips parsing this whole scene and returns empty.
            // This is useful for comments / prototypes inside of other scenes
            Token::Ignore => {
                // Should also clear any styles or tags in the scene
                scene_styles.clear();
                scene_tags.clear();

                // Keep track of how many scene opens there are
                // This is to make sure the scene close is at the correct place
                let mut extra_scene_opens = 1;
                while *i < tokens.len() {
                    match &tokens[*i] {
                        Token::SceneClose(_) => {
                            extra_scene_opens -= 1;
                            if extra_scene_opens == 0 {
                                *i += 1; // Skip the closing scene close
                                break;
                            }
                        }
                        Token::SceneOpen => {
                            extra_scene_opens += 1;
                        }
                        Token::EOF => {
                            break;
                        }
                        _ => {}
                    }
                    *i += 1;
                }

                return Ok(Value::None);
            }